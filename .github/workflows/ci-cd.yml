name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * *'  # Executa diariamente às 2h da manhã

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: 🧪 Testes Completos
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: crypto_dash_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Instalar dependências Python
      run: |
        python -m pip install --upgrade pip
        if [ -f backend/requirements.txt ]; then
          pip install -r backend/requirements.txt
        fi
        pip install pytest pytest-cov pytest-asyncio

    - name: 🧪 Executar testes Python
      run: |
        cd backend
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/crypto_dash_test
        REDIS_URL: redis://localhost:6379
        TESTING: 'true'
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    - name: 📦 Instalar dependências Node.js
      run: |
        cd frontend
        npm ci
        cd ..

    - name: 🧪 Executar testes Frontend
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --passWithNoTests
      env:
        NODE_ENV: test
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    - name: 📊 Upload cobertura Python
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: python
        name: python-coverage

    - name: 📊 Upload cobertura Frontend
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  lint:
    name: 🔍 Linting e Formatação
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Instalar dependências
      run: |
        cd frontend
        npm ci
        cd ..

    - name: 🧹 Verificar formatação
      run: |
        cd frontend
        npm run lint
        cd ..

  build:
    name: 🔨 Build da Aplicação
    needs: [test, lint]
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📦 Instalar dependências
      run: |
        cd frontend
        npm ci
        cd ..

    - name: 🏗️ Build da aplicação
      run: |
        cd frontend
        npm run build
      env:
        NODE_ENV: production
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

    - name: 📦 Build do backend
      run: |
        cd backend
        docker build -t crypto-backend .
        cd ..

  deploy:
    name: 🚀 Deploy
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🚀 Deploy Frontend (Vercel)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--prod'
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: frontend

    - name: 🐳 Build Backend Container
      run: |
        cd backend
        docker build -t crypto-backend:${{ github.sha }} .
        cd ..

    - name: 🚀 Deploy Backend (Railway/Railway)
      uses: bervProject/railway-deploy@main
      with:
        service: ${{ secrets.RAILWAY_SERVICE_ID }}
        token: ${{ secrets.RAILWAY_TOKEN }}

  security:
    name: 🔒 Análise de Segurança
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 🔍 Executar CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, python

    - name: 🔍 Análise de segurança Python
      uses: github/super-linter/slim@v4
      with:
        default-branch: main
        linter-branch: main
